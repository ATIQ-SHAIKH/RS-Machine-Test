{
	"info": {
		"_postman_id": "660dc65d-d009-4f7c-81b2-5d16339eb531",
		"name": "Raising Superstars",
		"description": "Each request has examples attached to it.  \nYou can do one of 2 things or try out both:\n\n- Run collection (click on 3 dots > Run Collection), Pre-request are in place for Update Activity Status so you don't have to manually figure out what value to put in place of `activity_id,`and test cases are also in place.\n    \n- Try out each of the request manually.\n    \n- Checkout the examples\n    \n\nNote: The way pre-request script is written for Update Activity Status after calling it 7 times test cases might fail, in that case re-seed the database by doing `npm run seed`in the backend terminal.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19783496",
		"_collection_link": "https://www.postman.com/navigation-specialist-12404858/workspace/rs-machine-test/collection/19783496-660dc65d-d009-4f7c-81b2-5d16339eb531?action=share&source=collection_link&creator=19783496"
	},
	"item": [
		{
			"name": "Get Pending Activities Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Content-Type header is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('success');",
							"    pm.expect(responseData).to.have.property('message');",
							"    pm.expect(responseData).to.have.property('data');",
							"})",
							"",
							"pm.test('TotalPendingTasks is a non-negative integer', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.totalPendingTasks).to.be.a('number');",
							"    pm.expect(responseData.data.totalPendingTasks).to.be.at.least(0);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8989/api/get/suggested/day/plan/pending/count?day=19",
					"host": [
						"localhost"
					],
					"port": "8989",
					"path": [
						"api",
						"get",
						"suggested",
						"day",
						"plan",
						"pending",
						"count"
					],
					"query": [
						{
							"key": "day",
							"value": "19",
							"description": "can be 14 to 20"
						}
					]
				}
			},
			"response": [
				{
					"name": "200",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8989/api/get/suggested/day/plan/pending/count?day=19",
							"host": [
								"localhost"
							],
							"port": "8989",
							"path": [
								"api",
								"get",
								"suggested",
								"day",
								"plan",
								"pending",
								"count"
							],
							"query": [
								{
									"key": "day",
									"value": "19"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": "{\n    \"success\": true,\n    \"message\": \"OK\",\n    \"data\": {\n        \"totalPendingTasks\": 7\n    }\n}"
				},
				{
					"name": "404",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8989/api/get/suggested/day/plan/pending/count?day=22",
							"host": [
								"localhost"
							],
							"port": "8989",
							"path": [
								"api",
								"get",
								"suggested",
								"day",
								"plan",
								"pending",
								"count"
							],
							"query": [
								{
									"key": "day",
									"value": "22"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": false,\n    \"message\": \"Data not found\",\n    \"data\": null\n}"
				},
				{
					"name": "400",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8989/api/get/suggested/day/plan/pending/count?day=199",
							"host": [
								"localhost"
							],
							"port": "8989",
							"path": [
								"api",
								"get",
								"suggested",
								"day",
								"plan",
								"pending",
								"count"
							],
							"query": [
								{
									"key": "day",
									"value": "199"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Secure-Server"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "105"
						},
						{
							"key": "ETag",
							"value": "W/\"69-P7vaHNJzA1Mb0r5oN/ARc7FR6W0\""
						},
						{
							"key": "Date",
							"value": "Sun, 16 Feb 2025 16:18:58 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": {\n        \"errors\": [\n            {\n                \"type\": \"field\",\n                \"value\": \"199\",\n                \"msg\": \"Invalid day\",\n                \"path\": \"day\",\n                \"location\": \"query\"\n            }\n        ]\n    }\n}"
				}
			]
		},
		{
			"name": "Get Day Plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Content-Type header is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Validate the success field is true', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('success', true);",
							"})",
							"",
							"pm.test('Data object has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.data).to.be.an('object');",
							"    pm.expect(responseData.data).to.include.all.keys('_id', 'day', 'activities', '__v', 'createdAt', 'updatedAt');",
							"})",
							"",
							"pm.test('Each activity object within the \\'activities\\' array contains non-empty properties', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.activities).to.be.an('array');",
							"    responseData.data.activities.forEach(function (activity) {",
							"        pm.expect(activity).to.have.property('activity').to.be.an('object');",
							"        pm.expect(activity.activity).to.have.property('name').that.is.a('string').and.to.have.lengthOf.at.least(1, 'name should not be empty');",
							"        pm.expect(activity).to.have.property('frequency').that.is.a('string').and.to.have.lengthOf.at.least(1, 'Frequency should not be empty');",
							"        pm.expect(activity).to.have.property('time').that.is.a('string').and.to.have.lengthOf.at.least(1, 'Time should not be empty');",
							"        pm.expect(activity).to.have.property('status').that.is.a('string').and.to.have.lengthOf.at.least(1, 'Status should not be empty');",
							"        pm.expect(activity).to.have.property('_id').that.is.a('string').and.to.have.lengthOf.at.least(1, '_id should not be empty');",
							"    });",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8989/api/get/suggested/day/plan?day=19",
					"host": [
						"localhost"
					],
					"port": "8989",
					"path": [
						"api",
						"get",
						"suggested",
						"day",
						"plan"
					],
					"query": [
						{
							"key": "day",
							"value": "19",
							"description": "can be 14 to 20"
						}
					]
				}
			},
			"response": [
				{
					"name": "200",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8989/api/get/suggested/day/plan?day=19",
							"host": [
								"localhost"
							],
							"port": "8989",
							"path": [
								"api",
								"get",
								"suggested",
								"day",
								"plan"
							],
							"query": [
								{
									"key": "day",
									"value": "19"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Secure-Server"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "1125"
						},
						{
							"key": "ETag",
							"value": "W/\"465-83Rj/1lUP3fNP7JCNFBt7w/TIWA\""
						},
						{
							"key": "Date",
							"value": "Sun, 16 Feb 2025 16:20:46 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": true,\n    \"message\": \"OK\",\n    \"data\": {\n        \"_id\": \"67b20c5f4f621c00a40c8c00\",\n        \"day\": 19,\n        \"activities\": [\n            {\n                \"activity\": {\n                    \"name\": \"Advanced Mobility Exercises\"\n                },\n                \"frequency\": \"maximize\",\n                \"time\": \"max\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c01\"\n            },\n            {\n                \"activity\": {\n                    \"name\": \"Knowledge Boosters\"\n                },\n                \"frequency\": \"2x/Day\",\n                \"time\": \"30 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c02\"\n            },\n            {\n                \"activity\": {\n                    \"name\": \"Visual Solfege\"\n                },\n                \"frequency\": \"1x/Day\",\n                \"time\": \"30 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c03\"\n            },\n            {\n                \"activity\": {\n                    \"name\": \"Auditory Memory (Song 2)\"\n                },\n                \"frequency\": \"1x/Day\",\n                \"time\": \"30 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c04\"\n            },\n            {\n                \"activity\": {\n                    \"name\": \"Auditory Magic (Set 2)\"\n                },\n                \"frequency\": \"2 sounds/Day\",\n                \"time\": \"60 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c05\"\n            },\n            {\n                \"activity\": {\n                    \"name\": \"Talk, To Listen\"\n                },\n                \"frequency\": \"1x/Day\",\n                \"time\": \"60 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c06\"\n            },\n            {\n                \"activity\": {\n                    \"name\": \"Stimulus Explosion\"\n                },\n                \"frequency\": \"2x/Week\",\n                \"time\": \"60 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c07\"\n            }\n        ],\n        \"__v\": 0,\n        \"createdAt\": \"2025-02-16T16:03:43.630Z\",\n        \"updatedAt\": \"2025-02-16T16:15:51.862Z\"\n    }\n}"
				},
				{
					"name": "404",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8989/api/get/suggested/day/plan?day=25",
							"host": [
								"localhost"
							],
							"port": "8989",
							"path": [
								"api",
								"get",
								"suggested",
								"day",
								"plan"
							],
							"query": [
								{
									"key": "day",
									"value": "25"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Secure-Server"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "56"
						},
						{
							"key": "ETag",
							"value": "W/\"38-X8zDWswZk8U3NSmY/DjbZwFAwzQ\""
						},
						{
							"key": "Date",
							"value": "Sun, 16 Feb 2025 16:21:26 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": false,\n    \"message\": \"Data not found\",\n    \"data\": null\n}"
				},
				{
					"name": "400",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8989/api/get/suggested/day/plan?day=199",
							"host": [
								"localhost"
							],
							"port": "8989",
							"path": [
								"api",
								"get",
								"suggested",
								"day",
								"plan"
							],
							"query": [
								{
									"key": "day",
									"value": "199"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Secure-Server"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "105"
						},
						{
							"key": "ETag",
							"value": "W/\"69-P7vaHNJzA1Mb0r5oN/ARc7FR6W0\""
						},
						{
							"key": "Date",
							"value": "Sun, 16 Feb 2025 16:18:36 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": {\n        \"errors\": [\n            {\n                \"type\": \"field\",\n                \"value\": \"199\",\n                \"msg\": \"Invalid day\",\n                \"path\": \"day\",\n                \"location\": \"query\"\n            }\n        ]\n    }\n}"
				}
			]
		},
		{
			"name": "Update Activity Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"try {",
							"    const response = await pm.sendRequest({",
							"        url: \"localhost:8989/api/get/suggested/day/plan?day=19\",",
							"        method: \"GET\"",
							"    });",
							"",
							"    const { data: { activities } } = response.json();",
							"    pm.globals.set(\"activity_id\", activities[0]._id);",
							"} catch (err) {",
							"    console.error(err);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Success field should exist and be true\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.equal(true);",
							"});",
							"",
							"",
							"pm.test(\"Data object exists and is in the correct format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Activities array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.activities).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.data.activities).to.have.length.above(0);",
							"});",
							"",
							"",
							"pm.test(\"Each activity object in the activities array contains non-empty strings for activity, frequency, time, and status\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.activities).to.be.an('array');",
							"    responseData.data.activities.forEach(function(activity) {",
							"         pm.expect(activity).to.have.property('activity').to.be.an('object');",
							"        pm.expect(activity.activity).to.have.property('name').that.is.a('string').and.to.have.lengthOf.at.least(1, 'name should not be empty');",
							"        pm.expect(activity).to.have.property('frequency').that.is.a('string').and.to.have.lengthOf.at.least(1, 'Frequency should not be empty');",
							"        pm.expect(activity).to.have.property('time').that.is.a('string').and.to.have.lengthOf.at.least(1, 'Time should not be empty');",
							"        pm.expect(activity).to.have.property('status').that.is.a('string').and.to.have.lengthOf.at.least(1, 'Status should not be empty');",
							"        pm.expect(activity).to.have.property('_id').that.is.a('string').and.to.have.lengthOf.at.least(1, '_id should not be empty');",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "localhost:8989/api/update/activity/status?activity_id={{activity_id}}&status=completed",
					"host": [
						"localhost"
					],
					"port": "8989",
					"path": [
						"api",
						"update",
						"activity",
						"status"
					],
					"query": [
						{
							"key": "activity_id",
							"value": "{{activity_id}}"
						},
						{
							"key": "status",
							"value": "completed",
							"description": "can be pending or completed"
						}
					]
				}
			},
			"response": [
				{
					"name": "200",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "localhost:8989/api/update/activity/status?activity_id=67b20c5f4f621c00a40c8c01&status=pending",
							"host": [
								"localhost"
							],
							"port": "8989",
							"path": [
								"api",
								"update",
								"activity",
								"status"
							],
							"query": [
								{
									"key": "activity_id",
									"value": "67b20c5f4f621c00a40c8c01"
								},
								{
									"key": "status",
									"value": "pending"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Secure-Server"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "1134"
						},
						{
							"key": "ETag",
							"value": "W/\"46e-YUexAYMW0wfvMewcSknv0z8VXeU\""
						},
						{
							"key": "Date",
							"value": "Sun, 16 Feb 2025 16:22:33 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": true,\n    \"message\": \"OK\",\n    \"data\": {\n        \"_id\": \"67b20c5f4f621c00a40c8c00\",\n        \"day\": 19,\n        \"activityPlan\": \"67b20c5f4f621c00a40c8bcd\",\n        \"activities\": [\n            {\n                \"activity\": \"67b20c5f4f621c00a40c8bc3\",\n                \"frequency\": \"maximize\",\n                \"time\": \"max\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c01\"\n            },\n            {\n                \"activity\": \"67b20c5f4f621c00a40c8bc4\",\n                \"frequency\": \"2x/Day\",\n                \"time\": \"30 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c02\"\n            },\n            {\n                \"activity\": \"67b20c5f4f621c00a40c8bc5\",\n                \"frequency\": \"1x/Day\",\n                \"time\": \"30 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c03\"\n            },\n            {\n                \"activity\": \"67b20c5f4f621c00a40c8bc6\",\n                \"frequency\": \"1x/Day\",\n                \"time\": \"30 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c04\"\n            },\n            {\n                \"activity\": \"67b20c5f4f621c00a40c8bc7\",\n                \"frequency\": \"2 sounds/Day\",\n                \"time\": \"60 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c05\"\n            },\n            {\n                \"activity\": \"67b20c5f4f621c00a40c8bc8\",\n                \"frequency\": \"1x/Day\",\n                \"time\": \"60 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c06\"\n            },\n            {\n                \"activity\": \"67b20c5f4f621c00a40c8bca\",\n                \"frequency\": \"2x/Week\",\n                \"time\": \"60 sec\",\n                \"status\": \"pending\",\n                \"_id\": \"67b20c5f4f621c00a40c8c07\"\n            }\n        ],\n        \"__v\": 0,\n        \"createdAt\": \"2025-02-16T16:03:43.630Z\",\n        \"updatedAt\": \"2025-02-16T16:22:33.390Z\"\n    }\n}"
				},
				{
					"name": "404",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "localhost:8989/api/update/activity/status?activity_id=67b20c5f4f621c00a40c8c00&status=pending",
							"host": [
								"localhost"
							],
							"port": "8989",
							"path": [
								"api",
								"update",
								"activity",
								"status"
							],
							"query": [
								{
									"key": "activity_id",
									"value": "67b20c5f4f621c00a40c8c00"
								},
								{
									"key": "status",
									"value": "pending"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Secure-Server"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "56"
						},
						{
							"key": "ETag",
							"value": "W/\"38-X8zDWswZk8U3NSmY/DjbZwFAwzQ\""
						},
						{
							"key": "Date",
							"value": "Sun, 16 Feb 2025 16:26:49 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": false,\n    \"message\": \"Data not found\",\n    \"data\": null\n}"
				},
				{
					"name": "400",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "localhost:8989/api/update/activity/status?activity_id=67b20c5f4f621c00a40c8c00&status=pendin",
							"host": [
								"localhost"
							],
							"port": "8989",
							"path": [
								"api",
								"update",
								"activity",
								"status"
							],
							"query": [
								{
									"key": "activity_id",
									"value": "67b20c5f4f621c00a40c8c00"
								},
								{
									"key": "status",
									"value": "pendin"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Secure-Server"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "114"
						},
						{
							"key": "ETag",
							"value": "W/\"72-hTI/wKYrTyuobotsnUTQxiYnbG4\""
						},
						{
							"key": "Date",
							"value": "Sun, 16 Feb 2025 16:27:06 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": {\n        \"errors\": [\n            {\n                \"type\": \"field\",\n                \"value\": \"pendin\",\n                \"msg\": \"Invalid status\",\n                \"path\": \"status\",\n                \"location\": \"query\"\n            }\n        ]\n    }\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}